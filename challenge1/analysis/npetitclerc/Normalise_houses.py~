#!/var/bin/python
"""
Plot the predicted Energy produced vs the actual Energy produced

"""
import numpy as np
from sklearn.utils import check_arrays
from sklearn import linear_model
from sklearn import preprocessing
from sklearn import svm
from utility_extra import mape
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Columns of data:
# 0-ID  1-Label  2-House  3-Year  4-Month  5-Temperature  6-Daylight  7-EnergyProduction
data_train = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500.csv", delimiter=',', skiprows=1)
data_test = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/test_dataset_500.csv", delimiter=',', skiprows=1)
#rfile = open("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500.csv", 'r')
#col_names = rfile.readline()

x_train = data_train[:, :8] 
x_test = data_test[:, :8] 

houses = {} 
for x in x_train:
    if x[2] in houses:
        houses[x[2]]['x'].append(x)
        houses[x[2]]['y'].append(x[7])
    else:
        houses[x[2]] = {'x':[x], 'y':[x[7]]}

for k in houses.keys():
    houses[k]['ymean'] = np.mean(houses[k]['y'])

e = np.zeros((x_train.shape[0],1))
for i, x in enumerate(x_train):
    e[i] = x[7] / houses[x[2]]['ymean']
    x[7] = houses[x[2]]['ymean']
x_train = np.append(x_train, e, axis=1)

e = np.zeros((x_test.shape[0],1))
for i, x in enumerate(x_test):
    e[i] = x[7] / houses[x[2]]['ymean']
    x[7] = houses[x[2]]['ymean']
x_test = np.append(x_test, e, axis=1)
 
np.savetxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500_nh.csv", x_train, delimiter=',', fmt='%i,%i,%i,%i,%i,%.1f,%.1f,%f,%f')
np.savetxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/test_dataset_500_nh.csv", x_test, delimiter=',', fmt='%i,%i,%i,%i,%i,%.1f,%.1f,%f,%f')
        
        
        
        
