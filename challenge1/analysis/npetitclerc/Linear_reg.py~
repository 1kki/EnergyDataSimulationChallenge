import numpy as np
from sklearn.utils import check_arrays
from sklearn import linear_model
from utility_extra import mape

# Columns of data:
# 0-ID  1-Label  2-House  3-Year  4-Month  5-Temperature  6-Daylight  7-EnergyProduction
# 0-ID  1-Label  2-House  3-Year  4-Month  5-Temperature  6-Daylight  7-MeanEnergyProduction 8-DiffE
data_train = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500_nh.csv", delimiter=',')
data_test = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/test_dataset_500_nh.csv", delimiter=',')
#data_train = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500.csv", delimiter=',', skiprows=1)
#data_test = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/test_dataset_500.csv", delimiter=',', skiprows=1)

x_train = data_train[:, [4, 5, 6, 7]]
y_train = data_train[:,8]
x_test = data_test[:, [4, 5, 6, 7]]
y_test = data_test[:, 8]
#x_train = data_train[:, [2, 4, 5, 6]]
#y_train = data_train[:,7]
#x_test = data_test[:, [2, 4, 5, 6]]
#y_test = data_test[:, 7]

################# linear models #########################################3
regr = linear_model.LinearRegression()
regr.fit(x_train, y_train)
pred = regr.predict(x_test)
print "Lin reg"
print "MAPE: ", mape(y_test, regr.predict(x_test))
# 18.071539582884451 %

print regr.coef_
#array([ -9.25787338e-03,  -9.38374902e+00,   6.37597883e+00, 2.35249694e+00])

# Seems like 'House' param is less important

# RIDGE
ridge = linear_model.Ridge(alpha = 0.5)
ridge.fit(x_train, y_train)
print "Ridge"
print "MAPE: ", mape(y_test, ridge.predict(x_test))
# 18.071564661971141 %

# LASSO
lasso = linear_model.Lasso(alpha = 0.1)
lasso.fit(x_train, y_train)
print "Lasso"
print "MAPE: ", mape(y_test, lasso.predict(x_test))
# 18.077449148619536 %

# LASSOLARS
lassolars = linear_model.LassoLars(alpha = 0.1)
lassolars.fit(x_train, y_train)
print "LAssoLars"
print "MAPE: ", mape(y_test, lassolars.predict(x_test))
# 18.015800050985494 %

# LASSOCV
lassocv = linear_model.LassoCV()
lassocv.fit(x_train, y_train)
print "LassoCV"
print "MAPE: ", mape(y_test, lassocv.predict(x_test))
# 18.205164218423047 %

# LASSOLARSCV
lassolarscv = linear_model.LassoLarsCV()
lassolarscv.fit(x_train, y_train)
print "LassoLarsCV"
print "MAPE: ", mape(y_test, lassolarscv.predict(x_test))
# 18.04982006299285 %

# Elastic Net
alpha =0.1
enet = linear_model.ElasticNet(alpha=alpha)
enet.fit(x_train, y_train)
print "ElasticNet"
print "MAPE: ", mape( y_test, enet.predict(x_test))
# 18.103322163131661 %

#################### Nearest Neighbors ##################################
from sklearn import neighbors

neigh = neighbors.KNeighborsRegressor(n_neighbors=5)
neigh.fit(x_train, y_train) 
print "KN n=5"
print "MAPE: ", mape( y_test, neigh.predict(x_test))
neigh = neighbors.KNeighborsRegressor(n_neighbors=10)
neigh.fit(x_train, y_train) 
print "KN n=10"
print "MAPE: ", mape( y_test, neigh.predict(x_test))
neigh = neighbors.KNeighborsRegressor(n_neighbors=100)
neigh.fit(x_train, y_train) 
print "KN n=100"
print "MAPE: ", mape( y_test, neigh.predict(x_test))
# 16.734344582424285 %
#n = 10
# 15.755250876940941
#n = 100
# 14.29555009826124 %

##################### SVR ########################################333
from sklearn import svm

svr = svm.SVR(kernel='linear')
svr.fit(x_train, y_train)
print "SVR lin"
print "MAPE: ", mape( y_test, svr.predict(x_test))
# 22.59680306471445 %

# Data probably need to be normalized
from sklearn import preprocessing

scaler = preprocessing.StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

normalizer = preprocessing.Normalizer()
x_train_norm = normalizer.fit_transform(x_train_scaled)
x_test_norm = normalizer.transform(x_test_scaled)


svr.fit(x_train_norm, y_train)
print "SVR lin norm"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
# 18.601139441757148 %

regr.fit(x_train_norm, y_train)
pred = regr.predict(x_test_norm)
print "Lin reg norm"
print "MAPE: ", mape(y_test, regr.predict(x_test_norm))
# 16.67953365455578

neigh = neighbors.KNeighborsRegressor(n_neighbors=5)
neigh.fit(x_train_norm, y_train) 
print "Kn n=5 norm"
print "MAPE: ", mape( y_test, neigh.predict(x_test_norm))
# 14.219943544507565


svr = svm.SVR(kernel='poly', degree=3)
svr.fit(x_train_norm, y_train)
print "SVR poly norm"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
# 13.949578884311961

svr = svm.SVR(kernel='rbf')
svr.fit(x_train_norm, y_train)
print "SVR rbf norm"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
# 15.842583488154427

sgd = linear_model.SGDRegressor()
sgd.fit(x_train_norm, y_train)
print "SGD norm"
print "MAPE: ", mape( y_test, sgd.predict(x_test_norm))
# 16.946877215525021

#ard = linear_model.ARDRegression()
#ard.fit(x_train_norm, y_train)
#mape( y_test, ard.predict(x_test_norm))
# Core dump...
 

from sklearn import ensemble
rfr = ensemble.RandomForestRegressor()
rfr.fit(x_train_norm, y_train)
print "RFR norm"
print "MAPE: ", mape( y_test, rfr.predict(x_test_norm))
# 14.355929296126014

# Using best parameters from GridSearch:
svr = svm.SVR(kernel='rbf', C=10, gamma=1)
svr.fit(x_train_norm, y_train)
print "Best of Gridsearch 1"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
#Out[25]: 13.101245242809251

svr = svm.SVR(kernel='rbf', C=15, gamma=1.25)
svr.fit(x_train_norm, y_train)
print "Best of Gridsearch 1"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
#Out[28]: 13.180922532409593

svr = svm.SVR(kernel='rbf', C=30, gamma=1)
svr.fit(x_train_norm, y_train)
print "Best of Gridsearch 1"
print "MAPE: ", mape( y_test, svr.predict(x_test_norm))
#Out[31]: 13.293805385290153





