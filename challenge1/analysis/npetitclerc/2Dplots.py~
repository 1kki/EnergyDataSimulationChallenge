#!/var/bin/python
"""
Plot the predicted Energy produced vs the actual Energy produced

"""
import numpy as np
from sklearn.utils import check_arrays
from sklearn import linear_model
from sklearn import preprocessing
from sklearn import svm
from utility_extra import mape
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Columns of data:
# 0-ID  1-Label  2-House  3-Year  4-Month  5-Temperature  6-Daylight  7-EnergyProduction
data_train = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/training_dataset_500.csv", delimiter=',', skiprows=1)
data_test = np.loadtxt("/home/nicolas/workspace/camenergydatalab/EnergyDataSimulationChallenge/challenge1/data/test_dataset_500.csv", delimiter=',', skiprows=1)

x_train = data_train[:, [2, 4, 5, 6]]
y_train = data_train[:,7]
x_test = data_test[:, [2, 4, 5, 6]]
y_test = data_test[:, 7]

#plt.subplot(2, 2, 1)

###################
regr = linear_model.LinearRegression()
regr.fit(x_train, y_train)
pred = regr.predict(x_test)
print "MAPE: ", mape(y_test, regr.predict(x_test)), "%"
print "Coefs: ", regr.coef_

xm = range(500)
ym = [np.mean(y_train[x*24:x*24 + 24]) for x in xm]

#houses = {} 
#for i, x in enumerate(x_train):
#    if x[0] in houses:
#        houses[x[0]]['x'].append(x)
#        houses[x[0]]['y'].append(y_train[i])
#    else:
#        houses[x[0]] = {'x':x, 'y':y_train[i]}


#for x in xm:
#    houses[x]['ymean'] = np.mean(houses[x]['y'])

xlabel = ['House','Month','Temperature','Daylight']
for i in xrange(4):
    plt.subplot(2, 2, i + 1)
    plt.scatter(x_train[:, i], y_train)
    xr = np.asarray(range(int(max(x_train[:, i]) - min(x_train[:, i])))) + min(x_train[:, i])
    yr = xr * regr.coef_[i] + min(y_train)
    plt.plot(xr, yr)
    
    plt.xlabel(xlabel[i])
    plt.ylabel('E')
plt.show()


